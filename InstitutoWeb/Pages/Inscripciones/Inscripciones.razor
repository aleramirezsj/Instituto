@page "/inscripciones"

@inject SweetAlertService SweetAlert
@inject ILogger<Inscripciones> logger
@inject IMemoryCacheService _memoryCache
@inject IUsuarioStateService usuarioStateService
@inject RazorRenderer renderer
@inject PdfGenerator pdfGenerator
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Inscripción a Materias</PageTitle>

@if (usuarioStateService.Usuario==null)
{
    <p><em>Esperando autenticación...</em></p>
}
else if (periodoInscripcionSeleccionado == null)
{
    <p><em>Se está cargando la información de la inscripción, espere un momento por favor</em></p>
}
else
{
    @if (carreraSeleccionada == null)
    {
        <ListCard ListEntity="@(carreras.Cast<IEntityIdNombre>().ToList())" OnSeleccionar="SeleccionarCarrera" TituloCard="Carrera" />
    }

    <div class="text-end">
        @if (usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Count > 1 && carreraSeleccionada != null && !visualizarPDF)
        {
            <button class="btn btn-dark me-2" @onclick="()=>{carreraSeleccionada=null; materias=null;StateHasChanged();}">Cambiar de carrera</button>
        }
        @if (inscripcionCurrent != null && carreraSeleccionada != null)
        {
            <button class="btn btn-dark me-2" @onclick="TooglePdf">@textoBotonPDF</button>
        }
        @if (inscripcionCurrent != null && !modificarInscripcion && !visualizarPDF && carreraSeleccionada != null && inscripcionAbierta)
        {
            <button class="btn btn-dark me-2" @onclick="ModificarInscripcion">Modificar inscripción</button>
        }
    </div>
    @if (!string.IsNullOrEmpty(pdfBase64) && visualizarPDF)
    {
        <iframe src="data:application/pdf;base64,@pdfBase64" width="100%" height="600px"></iframe>
    }
    else
    {
        if (carreraSeleccionada != null && materias != null)
        {
            if (inscripcionCurrent == null || modificarInscripcion)
            {
                if (inscripcionAbierta)
                {
                    <h3>Carrera: @carreraSeleccionada.Nombre </h3>
                    <ListCardInscripcionMaterias DetallesInscripcion="@detallesInscripcion" OnFinalizarInscripcion="FinalizarInscripcion" />
                }
                else
                {
                    <h3>Periodo inscripción: @periodoInscripcionSeleccionado?.Nombre</h3>
                    <h5>La inscripción a materias para este período no está habilitada</h5>
                }

            }
            else
            {
                <InscripcionMateriasPDF inscripcion="@inscripcionCurrent" />

            }
        }
    }
}

@code {
    private List<PeriodoInscripcion>? periodosInscripciones;
    private List<Carrera>? carreras;
    private PeriodoInscripcion? periodoInscripcionSeleccionado;
    private Carrera? carreraSeleccionada;
    private List<AnioCarrera>? aniosCarrera;
    private List<Materia>? materias;
    private List<DetalleInscripcion>? detallesInscripcion;

    private int? idCarreraSeleccionada;
    private string? pdfBase64;
    private Inscripcion? inscripcionCurrent;
    private bool visualizarPDF = false;
    private bool modificarInscripcion = false;
    private string textoBotonPDF => visualizarPDF ? "Ocultar PDF" : "Ver PDF";
    private bool inscripcionAbierta = false;

    protected override async Task OnInitializedAsync()
    {
        await usuarioStateService.InitializeAsync(); // Espera a que usuarioStateService se inicialice

        if (usuarioStateService.Usuario == null)
        {
            // Redirigir al usuario a la página de inicio de sesión si no está autenticado
            NavigationManager.NavigateTo("/login");
            return;
        }

        carreras = await _memoryCache.GetAllCacheAsync<Carrera>();
        periodosInscripciones = await _memoryCache.GetAllCacheAsync<PeriodoInscripcion>();
        periodoInscripcionSeleccionado = periodosInscripciones.Where(c => c.InscripcionHabilitada && c.CicloLectivo.Actual.Equals(true)).FirstOrDefault();
        if (periodoInscripcionSeleccionado == null)
        {
            inscripcionAbierta = false;
            periodoInscripcionSeleccionado = periodosInscripciones.Where(c => c.CicloLectivo.Actual.Equals(true)).LastOrDefault();
        }
        else inscripcionAbierta = true;
        if (usuarioStateService.Usuario != null && usuarioStateService.Usuario.TipoUsuario == TipoUsuarioEnum.Alumno)
        {
            if (usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Count > 1)
                carreras = carreras
                            .Where(c => usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Select(i => i.CarreraId).Contains(c.Id)).ToList();
            else
            {
                carreraSeleccionada = usuarioStateService.Usuario.Alumno.InscripcionesACarreras.FirstOrDefault().Carrera;
                aniosCarrera = (await _memoryCache.GetAllCacheAsync<AnioCarrera>())
                                .Where(a => a.CarreraId == carreraSeleccionada.Id).ToList();
                await ObtenerMateriasEInscripcion();
            }
        }
    }

    private async Task ModificarInscripcion()
    {
        modificarInscripcion = true;
        //obtengo las materias de la carrega
        materias = (await _memoryCache.GetAllCacheAsync<Materia>())
                    .Where(m => m.AnioCarrera.CarreraId == inscripcionCurrent.CarreraId &&
                           m.EsRecreo.Equals(false)).OrderBy(m => m.AnioCarreraId).ThenBy(m => m.Nombre).ToList();
        //creo tantos detalles inscripción como materias tenga la carrera
        detallesInscripcion = new List<DetalleInscripcion>();
        bool materiaInscripta = false;
        foreach (var materia in materias)
        {
            materiaInscripta = inscripcionCurrent.detallesInscripciones.Any(d => d.MateriaId == materia.Id);
            detallesInscripcion.Add(new DetalleInscripcion
                {
                    MateriaId = materia.Id,
                    Materia = materia,
                    ModalidadCursado = materiaInscripta ? (inscripcionCurrent.detallesInscripciones
                                                                .Find(d => d.MateriaId == materia.Id))
                                                                .ModalidadCursado : ModalidadCursadoEnum.Presencial,
                    Eliminado = materiaInscripta

                });
        }
        StateHasChanged();
    }

    private async Task TooglePdf()
    {
        visualizarPDF = !visualizarPDF;
        if (string.IsNullOrEmpty(pdfBase64) && visualizarPDF)
        {
            await GenerarPDF();
        }
        StateHasChanged();
    }

    private async Task GenerarPDF()
    {
        SweetAlertOptions options = new SweetAlertOptions
            {
                Title = "Generando PDF",
                Text = "El archivo PDF se está generando...",
                Icon = SweetAlertIcon.Info,
                ShowCancelButton = false,
                ShowConfirmButton = false,
                ShowCloseButton = false,
                AllowOutsideClick = false,
                AllowEscapeKey = false,
                AllowEnterKey = false
            };
        SweetAlert.FireAsync(options);
        var html = await renderer.RenderComponentAsync<InscripcionMateriasPDF>(new Dictionary<string, object?>
        {
            { "inscripcion", inscripcionCurrent }
        });
        var pdfBytes = await pdfGenerator.GeneratePdfAsync(html);

        // Convertir el PDF a base64
        pdfBase64 = Convert.ToBase64String(pdfBytes);

        if (!string.IsNullOrEmpty(pdfBase64))
        {
            await SweetAlert.FireAsync("Éxito", "El archivo PDF se ha generado correctamente.", SweetAlertIcon.Success);
        }
        else
        {
            // Hubo un problema al almacenar el archivo
            await SweetAlert.FireAsync("Error", "Hubo un problema al generar el archivo PDF.", SweetAlertIcon.Error);
        }
    }

    private async Task ObtenerMateriasEInscripcion()
    {
        //muestro cuantos anios carrera tiene la carrera seleccionada con el logger
        if (periodoInscripcionSeleccionado.Es1erCuatrimestre)
        {
            materias = (await _memoryCache.GetAllCacheAsync<Materia>())
            .Where(m => m.AnioCarrera.CarreraId == carreraSeleccionada.Id &&
                    m.EsRecreo.Equals(false) &&
                    (m.TipoMateria.Equals(TipoMateriaEnum.Cuatrimestre_1) || m.TipoMateria.Equals(TipoMateriaEnum.Anual)))
                .OrderBy(m => m.AnioCarreraId).ThenBy(m => m.Nombre).ToList();
        }
        else
        {
            materias = (await _memoryCache.GetAllCacheAsync<Materia>())
            .Where(m => m.AnioCarrera.CarreraId == carreraSeleccionada.Id &&
                    m.EsRecreo.Equals(false) &&
                    (m.TipoMateria.Equals(TipoMateriaEnum.Cuatrimestre_2)))
                .OrderBy(m => m.AnioCarreraId).ThenBy(m => m.Nombre).ToList();
        }

        //creo tantos detalles inscripción como materias tenga la carrera
        detallesInscripcion = new List<DetalleInscripcion>();
        foreach (var materia in materias)
        {
            detallesInscripcion.Add(new DetalleInscripcion
                {
                    MateriaId = materia.Id,
                    Materia = materia,
                    ModalidadCursado = ModalidadCursadoEnum.Presencial
                });
        }
        inscripcionCurrent = (await _memoryCache.GetAllCacheAsync<Inscripcion>())
        .Where(i => i.AlumnoId == usuarioStateService.Usuario.Alumno.Id &&
               i.PeriodoInscripcionId == periodoInscripcionSeleccionado.Id &&
                i.CarreraId == carreraSeleccionada.Id).FirstOrDefault();
    }

    private async Task FinalizarInscripcion(List<DetalleInscripcion> detallesInscripcion)
    {
        if (inscripcionCurrent == null)
        {
            var nuevaInscripcion = new Inscripcion
                {
                    AlumnoId = usuarioStateService.Usuario.Alumno.Id,
                    Alumno = usuarioStateService.Usuario.Alumno,
                    CarreraId = carreraSeleccionada.Id,
                    Carrera = carreraSeleccionada,
                    PeriodoInscripcionId = periodoInscripcionSeleccionado.Id,
                    PeriodoInscripcion = periodoInscripcionSeleccionado,
                    Fecha = DateTime.Now
                };
            foreach (var detalle in detallesInscripcion)
            {
                nuevaInscripcion.detallesInscripciones.Add(new DetalleInscripcion
                    {
                        MateriaId = detalle.Materia.Id,
                        Materia = detalle.Materia,
                        ModalidadCursado = detalle.ModalidadCursado

                    });
            }

            inscripcionCurrent = await _memoryCache.AddCacheAsync<Inscripcion>(nuevaInscripcion);
            //inscripcionCurrent = nuevaInscripcion;
        }
        else
        {
            inscripcionCurrent.detallesInscripciones.Clear();
            foreach (var detalle in detallesInscripcion)
            {
                inscripcionCurrent.detallesInscripciones.Add(new DetalleInscripcion
                    {
                        MateriaId = detalle.Materia.Id,
                        Materia = detalle.Materia,
                        ModalidadCursado = detalle.ModalidadCursado
                    });
            }
            await _memoryCache.UpdateCacheAsync<Inscripcion>(inscripcionCurrent);
            modificarInscripcion = false;
        }
        StateHasChanged();
    }

    private async Task SeleccionarCarrera(int idCarrera)
    {
        idCarreraSeleccionada = idCarrera;
        modificarInscripcion = false;
        visualizarPDF = false;
        carreraSeleccionada = carreras.FirstOrDefault(c => c.Id == idCarreraSeleccionada);
        await ObtenerMateriasEInscripcion();
        StateHasChanged();
    }
}
