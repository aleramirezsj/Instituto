@page "/mesasexamenes"

@inject SweetAlertService SweetAlert
@inject ILogger<MesasExamenes> logger
@inject IMemoryCacheService _memoryCache
@inject IUsuarioStateService usuarioStateService


<PageTitle>Mesas de exámenes</PageTitle>
<h1>Mesas de exámenes</h1>

@if (turnosExamenes == null && carreras==null)
{
    <p><em>Cargando...</em></p>
}
else
{
    
    if(idTurnoExamenSeleccionado==null)
    {
        <ListCard ListEntity="@(turnosExamenes.Cast<IEntityIdNombre>().ToList())" OnSeleccionar="SeleccionarTurnoExamem" TituloCard="Turno de examen" />
    }
    else
    {
        if(idCarreraSeleccionada==null)
        {
            <ListCard ListEntity="@(carreras.Cast<IEntityIdNombre>().ToList())" OnSeleccionar="SeleccionarCarrera" TituloCard="Carrera" />
        }else
        {
            <div class="row">
                <div class="text-end">
                @if (usuarioStateService.Usuario != null)
                {
                    <button class="btn btn-outline-dark me-2" @onclick="VerSoloMisMesas">Ver mis mesas </button>
                }

                    <button class="btn btn-outline-dark" @onclick="VerMesasDeTodasLasCarreras">Ver todas las mesas</button>
                </div>
            </div>
            if (usuarioStateService.Usuario==null||usuarioStateService.Usuario.TipoUsuario == TipoUsuarioEnum.Alumno||verTodasLasMesas)
            {
                <TableMesaExamen MesasExamenes="mesasExamenes"/>
            } else
            {
                <TableMesaExamenDocente MesasExamenes="mesasExamenes"/>
            }

        }
        
    }
}

@code {
    private List<TurnoExamen>? turnosExamenes;
    private List<Carrera>? carreras;
    private List<MesaExamen>? mesasExamenes;

    private int? idTurnoExamenSeleccionado;
    private int? idCarreraSeleccionada;
    private bool verTodasLasMesas = false;

    //private Carrera carreraSeleccionada;

    protected override async Task OnInitializedAsync()
    {
        turnosExamenes = await _memoryCache.GetAllCacheAsync<TurnoExamen>();
        carreras = await _memoryCache.GetAllCacheAsync<Carrera>();
        mesasExamenes = await _memoryCache.GetAllCacheAsync<MesaExamen>();
        if(turnosExamenes.Any(turno=>turno.Actual))
            idTurnoExamenSeleccionado = turnosExamenes.FirstOrDefault(turno=>turno.Actual).Id;

        if(usuarioStateService.Usuario!=null)
           ObtenerMesasDelUsuarioLogueado();

    }

    private async Task SeleccionarTurnoExamem(int idTurno)
    {
        idTurnoExamenSeleccionado = idTurno;
        StateHasChanged();
    }

    private async Task SeleccionarCarrera(int idCarrera)
    {
        idCarreraSeleccionada = idCarrera;
        mesasExamenes = (await _memoryCache.GetAllCacheAsync<MesaExamen>())
                        .Where(m => m.TurnoExamenId == idTurnoExamenSeleccionado && m.Materia.AnioCarrera.CarreraId == idCarreraSeleccionada).ToList();
        //mesasExamenes = await mesaExamenService.GetByTurnoAndCarreraAsync(idTurnoExamenSeleccionado, idCarreraSeleccionada);
        logger.LogInformation(mesasExamenes.Count.ToString());
        StateHasChanged();
    }

    private async Task VerMesasDeTodasLasCarreras()
    {
        idCarreraSeleccionada = null;
        verTodasLasMesas = true;
        carreras = await _memoryCache.GetAllCacheAsync<Carrera>();
        StateHasChanged();
    }

    private async Task VerSoloMisMesas()
    {
        verTodasLasMesas=false;
        ObtenerMesasDelUsuarioLogueado();
        StateHasChanged();
    }
    private async Task ObtenerMesasDelUsuarioLogueado()
    {
         if(usuarioStateService.Usuario.TipoUsuario==TipoUsuarioEnum.Alumno)
            {
                if (usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Count > 1)
                {
                    idCarreraSeleccionada = null;
                    carreras = (await _memoryCache.GetAllCacheAsync<Carrera>())
                                .Where(c => usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Select(i => i.CarreraId).Contains(c.Id)).ToList();
                }
                else
                {
                    idCarreraSeleccionada = usuarioStateService.Usuario.Alumno.InscripcionesACarreras.FirstOrDefault().CarreraId;
                    mesasExamenes = (await _memoryCache.GetAllCacheAsync<MesaExamen>())
                                .Where(m => m.TurnoExamenId == idTurnoExamenSeleccionado && m.Materia.AnioCarrera.CarreraId == idCarreraSeleccionada).ToList();

                }
            }
            else
            {
                idCarreraSeleccionada = 0;

                if(idTurnoExamenSeleccionado!=null)
                {
                    //filtro las mesas de examenes por el turno seleccionado y por el docente logueado
                    mesasExamenes = (await _memoryCache.GetAllCacheAsync<MesaExamen>())
                                    .Where(m => m.TurnoExamenId == idTurnoExamenSeleccionado &&
                                    m.DetallesMesaExamen.Any(detalle => detalle.DocenteId == usuarioStateService.Usuario.DocenteId)).ToList();
                }
            }
    }

    
}
