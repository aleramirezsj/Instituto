@page "/mesasexamenes"

@inject SweetAlertService SweetAlert
@inject ILogger<MesasExamenes> logger
@inject IMemoryCacheService _memoryCache
@inject IUsuarioStateService usuarioStateService


<PageTitle>Mesas de exámenes</PageTitle>
<h1>Mesas de exámenes</h1>

@if (turnosExamenes == null && carreras==null)
{
    <p><em>Cargando...</em></p>
}
else
{
    
    if(idTurnoExamenSeleccionado==null)
    {
        <ListCard ListEntity="@(turnosExamenes.Cast<IEntityIdNombre>().ToList())" OnSeleccionar="SeleccionarTurnoExamem" TituloCard="Turno de examen" />
    }
    else
    {
        <div class="row">
            <div class="text-end">
                @if (usuarioStateService.Usuario != null)
                {

                        <ButtonSelected text="Hoy" condition="@verMesasDeHoy" OnClick="VerMesasDeHoy" />
                    <ButtonSelected text="Mis mesas" condition="!verTodasLasMesas && !verMesasDeHoy" OnClick="VerSoloMisMesas" />
                    <ButtonSelected text="Todas las mesas" condition="verTodasLasMesas&&!verMesasDeHoy" OnClick="VerMesasDeTodasLasCarreras" />
                }
            </div>
        </div>
        if(idCarreraSeleccionada==null)
        {
            <ListCard ListEntity="@(carreras.Cast<IEntityIdNombre>().ToList())" OnSeleccionar="SeleccionarCarrera" TituloCard="Carrera" />
        }else
        {

            if (usuarioStateService.Usuario==null||usuarioStateService.Usuario.TipoUsuario == TipoUsuarioEnum.Alumno)
            {
                if(verMesasDeHoy)
                {
                    <ListCardMesasHoyAlumnos ListMesasExamenes="mesasExamenes"/>
                }
                else
                {
                    <TableMesaExamen MesasExamenes="mesasExamenes"/>
                }
            } else
            {
                if(verMesasDeHoy)
                {
                    <ListCardMesasHoyDocentes ListMesasExamenes="mesasExamenes" />
                }
                else
                {
                    if(verTodasLasMesas)
                    {
                        <TableMesaExamen MesasExamenes="mesasExamenes"/>
                    }
                    else
                    {
                        <TableMesaExamenDocente MesasExamenes="mesasExamenes"/>
                    }
                }
            }

        }
        
    }
}

@code {
    private List<TurnoExamen>? turnosExamenes;
    private List<Carrera>? carreras;
    private List<MesaExamen>? mesasExamenes;

    private int? idTurnoExamenSeleccionado;
    private int? idCarreraSeleccionada;
    private bool verTodasLasMesas = false;
    private bool verMesasDeHoy = false;

    //private Carrera carreraSeleccionada;

    protected override async Task OnInitializedAsync()
    {
        turnosExamenes = await _memoryCache.GetAllCacheAsync<TurnoExamen>();
        carreras = await _memoryCache.GetAllCacheAsync<Carrera>();
        mesasExamenes = await _memoryCache.GetAllCacheAsync<MesaExamen>();
        if(turnosExamenes.Any(turno=>turno.Actual))
            idTurnoExamenSeleccionado = turnosExamenes.FirstOrDefault(turno=>turno.Actual).Id;

        if(usuarioStateService.Usuario!=null)
        {
            if (usuarioStateService.Usuario.TipoUsuario == TipoUsuarioEnum.Docente)
                idCarreraSeleccionada = 0;
            if(usuarioStateService.Usuario.TipoUsuario==TipoUsuarioEnum.Alumno)
                DefinirCarreraSeleccionada();
            await ObtenerMesasDelUsuarioLogueado();   
        }

    }

    private async Task DefinirCarreraSeleccionada()
    {
        if (usuarioStateService?.Usuario.Alumno?.InscripcionesACarreras.Count > 1)
        {
            idCarreraSeleccionada = null;
            carreras = (await _memoryCache.GetAllCacheAsync<Carrera>())
                        .Where(c => usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Select(i => i.CarreraId).Contains(c.Id)).ToList();
        }
        else
        {
            idCarreraSeleccionada = usuarioStateService.Usuario.Alumno.InscripcionesACarreras.FirstOrDefault()?.CarreraId;
        }
    }
    private async Task SeleccionarTurnoExamem(int idTurno)
    {
        idTurnoExamenSeleccionado = idTurno;
        StateHasChanged();
    }

    private async Task SeleccionarCarrera(int idCarrera)
    {
        idCarreraSeleccionada = idCarrera;
        await ObtenerMesasDelUsuarioLogueado();
        //mesasExamenes = await mesaExamenService.GetByTurnoAndCarreraAsync(idTurnoExamenSeleccionado, idCarreraSeleccionada);
        logger.LogInformation(mesasExamenes.Count.ToString());
        StateHasChanged();
    }

    private async Task VerMesasDeTodasLasCarreras()
    {
        idCarreraSeleccionada = null;
        verTodasLasMesas = true;
        verMesasDeHoy = false;
        carreras = await _memoryCache.GetAllCacheAsync<Carrera>();
        StateHasChanged();
    }

    private async Task VerSoloMisMesas()
    {
        verTodasLasMesas=false;
        verMesasDeHoy = false;
        if (usuarioStateService.Usuario.TipoUsuario == TipoUsuarioEnum.Alumno)
            await DefinirCarreraSeleccionada();
        else
            idCarreraSeleccionada = 0;
        await ObtenerMesasDelUsuarioLogueado();
        StateHasChanged();
    }
    private async Task VerMesasDeHoy()
    {
        verMesasDeHoy = true;
        verTodasLasMesas = false;
        if (usuarioStateService.Usuario.TipoUsuario == TipoUsuarioEnum.Alumno)
            await DefinirCarreraSeleccionada();
        else
            idCarreraSeleccionada = 0;
        await ObtenerMesasDelUsuarioLogueado();
        StateHasChanged();
    }
    private async Task ObtenerMesasDelUsuarioLogueado()
    {
        if (idTurnoExamenSeleccionado != null)
        {
            if(usuarioStateService.Usuario.TipoUsuario==TipoUsuarioEnum.Alumno)
            {
                if (verMesasDeHoy)
                {
                    mesasExamenes = (await _memoryCache.GetAllCacheAsync<MesaExamen>())
                                .Where(m => m.TurnoExamenId == idTurnoExamenSeleccionado && m.Materia.AnioCarrera.CarreraId == idCarreraSeleccionada && (m.Llamado1.Date==DateTime.Today||m.Llamado2.Date==DateTime.Today)).ToList();
                }
                else
                {
                    mesasExamenes = (await _memoryCache.GetAllCacheAsync<MesaExamen>())
                                .Where(m => m.TurnoExamenId == idTurnoExamenSeleccionado && m.Materia.AnioCarrera.CarreraId == idCarreraSeleccionada).ToList();
                }
            }
            else
            {
                if (verTodasLasMesas && idCarreraSeleccionada != null)
                {
                    mesasExamenes = (await _memoryCache.GetAllCacheAsync<MesaExamen>())
                        .Where(m => m.TurnoExamenId == idTurnoExamenSeleccionado && m.Materia.AnioCarrera.CarreraId == idCarreraSeleccionada).ToList();
                }
                else
                {
                    if (verMesasDeHoy)
                    {
                        mesasExamenes = (await _memoryCache.GetAllCacheAsync<MesaExamen>())
                                    .Where(m => m.TurnoExamenId == idTurnoExamenSeleccionado &&
                                    m.DetallesMesaExamen.Any(detalle => detalle.DocenteId == usuarioStateService.Usuario.DocenteId) &&
                                    (m.Llamado1.Date == DateTime.Today || m.Llamado2.Date == DateTime.Today)).ToList();
                    }
                    else
                    {

                        mesasExamenes = (await _memoryCache.GetAllCacheAsync<MesaExamen>())
                                .Where(m => m.TurnoExamenId == idTurnoExamenSeleccionado &&
                            m.DetallesMesaExamen.Any(detalle => detalle.DocenteId == usuarioStateService.Usuario.DocenteId)).OrderBy(m => m.Llamado1.Date).ThenBy(m => m.Horario).ToList();
                    }
                }
            }
        }
    }

    
}
