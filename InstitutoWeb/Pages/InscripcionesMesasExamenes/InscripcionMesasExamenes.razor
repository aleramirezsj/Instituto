@page "/inscripcionmesasexamenes"

@inject IGenericService<CicloLectivo> cicloLectivoService
@inject IGenericService<Carrera> carreraService
@inject IDetalleHorarioService detalleHorarioService
@inject SweetAlertService SweetAlert
@inject ILogger<InscripcionMesasExamenes> logger
@inject IMemoryCacheService _memoryCache
@inject IUsuarioStateService usuarioStateService
@inject RazorRenderer renderer
@inject PdfGenerator pdfGenerator
@inject IJSRuntime JSRuntime

<PageTitle>Inscripción Mesas de Exámenes</PageTitle>

@if (turnoExamenSeleccionado == null)
{
    <p><em>No existe un turno de examen abierto actualmente</em></p>
}
else
{
    <h3>Turno: @turnoExamenSeleccionado.Nombre</h3>
    @if (carreraSeleccionada == null)
    {
        <ListCard ListEntity="@(carreras.Cast<IEntityIdNombre>().ToList())" OnSeleccionar="SeleccionarCarrera" TituloCard="Carrera" />
    }
    if (carreraSeleccionada != null && materias != null)
    {
        if (usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Count > 1)
        {
            <div class="text-end">
                <button class="btn btn-dark me-2" @onclick="()=>{carreraSeleccionada=null; materias=null;StateHasChanged();}">Cambiar de carrera</button>
            </div>

        }

        <h3>Carrera: @carreraSeleccionada.Nombre </h3>
        <ListCardInscripcionMesasExamenes Materias="@materias" OnFinalizarInscripcion="FinalizarInscripcion" />
    }
}

@if (!string.IsNullOrEmpty(pdfBase64))
{
    <iframe src="data:application/pdf;base64,@pdfBase64" width="100%" height="600px"></iframe>
}


@code {
    private List<TurnoExamen>? turnosExamenes;
    private List<Carrera>? carreras;
    private TurnoExamen? turnoExamenSeleccionado;
    private Carrera? carreraSeleccionada;
    private List<AnioCarrera>? aniosCarrera;
    private List<Materia>? materias;

    private int? idCarreraSeleccionada;
    private string? pdfBase64;

    protected override async Task OnInitializedAsync()
    {
        carreras = await _memoryCache.GetAllCacheAsync<Carrera>();
        turnosExamenes = await _memoryCache.GetAllCacheAsync<TurnoExamen>();
        if (turnosExamenes.Any(c => c.Actual))
        {
            turnoExamenSeleccionado = turnosExamenes.Where(c => c.Actual).FirstOrDefault();
        }
        if (usuarioStateService.Usuario != null && usuarioStateService.Usuario.TipoUsuario == TipoUsuarioEnum.Alumno)
        {
            if (usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Count > 1)
            {
                carreras = carreras
                            .Where(c => usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Select(i => i.CarreraId).Contains(c.Id)).ToList();
            }
            else
            {
                carreraSeleccionada = usuarioStateService.Usuario.Alumno.InscripcionesACarreras.FirstOrDefault().Carrera;

                aniosCarrera = (await _memoryCache.GetAllCacheAsync<AnioCarrera>())
                                .Where(a => a.CarreraId == carreraSeleccionada.Id).ToList();
                //muestros cuantos anios carrera tiene la carrera seleccionada con el logger
                materias = (await _memoryCache.GetAllCacheAsync<Materia>())
                    .Where(m => m.AnioCarrera.CarreraId == carreraSeleccionada.Id && m.EsRecreo.Equals(false)).ToList();
            }

        }

    }

    private async Task FinalizarInscripcion(List<Materia> materiasInscripcion)
    {
        var nuevaInscripcion = new InscripcionExamen
            {
                AlumnoId = usuarioStateService.Usuario.Alumno.Id,
                Alumno = usuarioStateService.Usuario.Alumno,
                CarreraId = carreraSeleccionada.Id,
                Carrera = carreraSeleccionada,
                TurnoExamenId = turnoExamenSeleccionado.Id,
                TurnoExamen = turnoExamenSeleccionado,
                Fecha = DateTime.Now
            };
        foreach (var materia in materiasInscripcion)
        {
            nuevaInscripcion.detallesInscripcionesExamenes.Add(new DetalleInscripcionExamen
                {
                    MateriaId = materia.Id,
                    Materia = materia
                });
        }
        SweetAlertOptions options = new SweetAlertOptions
            {
                Title = "Generando PDF",
                Text = "El archivo PDF se está generando...",
                Icon = SweetAlertIcon.Info,
                ShowCancelButton = false,
                ShowConfirmButton = false,
                ConfirmButtonText = "Descargar PDF",
                ConfirmButtonColor = "#3085d6",
                ShowCloseButton = false,
                AllowOutsideClick = false,
                AllowEscapeKey = false,
                AllowEnterKey = false
            };
         SweetAlert.FireAsync(options);

        await _memoryCache.AddCacheAsync<InscripcionExamen>(nuevaInscripcion);
        var html = await renderer.RenderComponentAsync<InscripcionPDF>(new Dictionary<string, object?>
        {
            { "inscripcion", nuevaInscripcion }
        });
        var pdfBytes = await pdfGenerator.GeneratePdfAsync(html);

        // Convertir el PDF a base64
        pdfBase64 = Convert.ToBase64String(pdfBytes);

        if (!string.IsNullOrEmpty(pdfBase64))
        {
            //await SweetAlert.Close();
            // El archivo se almacenó correctamente
            await SweetAlert.FireAsync("Éxito", "El archivo PDF se ha generado correctamente.", SweetAlertIcon.Success);
        }
        else
        {
            // Hubo un problema al almacenar el archivo
            await SweetAlert.FireAsync("Error", "Hubo un problema al generar el archivo PDF.", SweetAlertIcon.Error);
        }

        StateHasChanged();
    }

    private async Task SeleccionarCarrera(int idCarrera)
    {
        idCarreraSeleccionada = idCarrera;

        carreraSeleccionada = carreras.FirstOrDefault(c => c.Id == idCarreraSeleccionada);
        materias = (await _memoryCache.GetAllCacheAsync<Materia>())
                    .Where(m => m.AnioCarrera.CarreraId == carreraSeleccionada.Id && m.EsRecreo.Equals(false)).ToList();
        StateHasChanged();
    }
}

