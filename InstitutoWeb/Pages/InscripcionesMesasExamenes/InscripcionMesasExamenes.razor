@page "/inscripcionmesasexamenes"

@inject IGenericService<CicloLectivo> cicloLectivoService
@inject IGenericService<Carrera> carreraService
@inject IDetalleHorarioService detalleHorarioService
@inject SweetAlertService SweetAlert
@inject ILogger<InscripcionMesasExamenes> logger
@inject IMemoryCacheService _memoryCache
@inject IUsuarioStateService usuarioStateService


<PageTitle>Inscripción Mesas de Exámenes</PageTitle>


@if (turnoExamenSeleccionado == null )
{
    <p><em>No existe un turno de examen abierto actualmente</em></p>
}
else
{
    <h3>Turno: @turnoExamenSeleccionado.Nombre</h3>
    @if (carreraSeleccionada == null)
    {
        <ListCard ListEntity="@(carreras.Cast<IEntityIdNombre>().ToList())" OnSeleccionar="SeleccionarCarrera" TituloCard="Carrera" />
    }
    if(carreraSeleccionada!=null&&materias!=null)
    {
        if (usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Count > 1)
        {
            <div class="text-end">
                <button class="btn btn-dark me-2" @onclick="()=>{carreraSeleccionada=null; materias=null;StateHasChanged();}">Cambiar de carrera</button>
            </div>
            
        }

        <h3>Carrera: @carreraSeleccionada.Nombre </h3>
        <ListCardInscripcionMesasExamenes Materias="@materias" OnFinalizarInscripcion="FinalizarInscripcion"  />
    }
    
}

@code {
    private List<TurnoExamen>? turnosExamenes;
    private List<Carrera>? carreras;
    private TurnoExamen? turnoExamenSeleccionado;
    private Carrera? carreraSeleccionada;
    private List<AnioCarrera>? aniosCarrera;
    private List<Materia>? materias;

    private int? idCicloLectivoSeleccionado;
    private int? idCarreraSeleccionada;


    protected override async Task OnInitializedAsync()
    {
        carreras = await _memoryCache.GetAllCacheAsync<Carrera>();
        turnosExamenes = await _memoryCache.GetAllCacheAsync<TurnoExamen>();
        if (turnosExamenes.Any(c => c.Actual))
        {
            turnoExamenSeleccionado = turnosExamenes.Where(c => c.Actual).FirstOrDefault();
        }
        if(usuarioStateService.Usuario!=null&&usuarioStateService.Usuario.TipoUsuario==TipoUsuarioEnum.Alumno)
        {
            if(usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Count>1)
            {
                carreras = carreras
                            .Where(c => usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Select(i => i.CarreraId).Contains(c.Id)).ToList();
                logger.LogInformation($"carreras del alumno {carreras.Count}");
            }
            else
            {
                carreraSeleccionada = usuarioStateService.Usuario.Alumno.InscripcionesACarreras.FirstOrDefault().Carrera;
                logger.LogInformation($"carrera seleccionada {carreraSeleccionada.Nombre}");

                aniosCarrera = (await _memoryCache.GetAllCacheAsync<AnioCarrera>())
                                .Where(a => a.CarreraId == carreraSeleccionada.Id).ToList();
                //muestros cuantos anios carrera tiene la carrera seleccionada con el logger
                logger.LogInformation($"anios carrera {aniosCarrera.Count}");
                materias = (await _memoryCache.GetAllCacheAsync<Materia>())
                    .Where(m => m.AnioCarrera.CarreraId == carreraSeleccionada.Id&&m.EsRecreo.Equals(false)).ToList();
            }

        }
        
    }

    private async Task FinalizarInscripcion(List<Materia> materiasInscripcion)
    {
        var nuevaInscripcion=new InscripcionExamen
        {
            AlumnoId=usuarioStateService.Usuario.Alumno.Id,
            CarreraId=carreraSeleccionada.Id,
            TurnoExamenId=turnoExamenSeleccionado.Id,
            Fecha=DateTime.Now
        };
        foreach(var materia in materiasInscripcion)
        {
            nuevaInscripcion.detallesInscripcionesExamenes.Add(new DetalleInscripcionExamen
            {
                MateriaId=materia.Id,

            });
        }
        _memoryCache.AddCacheAsync<InscripcionExamen>(nuevaInscripcion);
        StateHasChanged();
    }

    private async Task SeleccionarCarrera(int idCarrera)
    {
        idCarreraSeleccionada = idCarrera;

        carreraSeleccionada= carreras.FirstOrDefault(c => c.Id == idCarreraSeleccionada);
        materias = (await _memoryCache.GetAllCacheAsync<Materia>())
                    .Where(m => m.AnioCarrera.CarreraId == carreraSeleccionada.Id && m.EsRecreo.Equals(false)).ToList();
        StateHasChanged();
    }




    
}
