@page "/registrarse"
@inject AuthenticationService AuthService
@inject NavigationManager NavigationManager
@inject SweetAlertService SweetAlert
@inject IMemoryCacheBlazorService _memoryCache
@inject ILogger<Registrarse> logger

<!--creamos un formulario que pide email, password, nombre completo-->
<h3>Registrarse</h3>
<EditForm Model="usuario" OnValidSubmit="Registro">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="email">Email</label>
        <InputText class="form-control mb-2" type="text" @bind-Value="usuario.Email" />
    </div>
    <div class="form-group">
        <label for="clave">Contraseña</label>
        <InputText class="form-control mb-2" type="password" @bind-Value="usuario.Password" />
    </div>
    <div class="form-group">
        <label for="clave">Contraseña</label>
        <InputText class="form-control mb-2" type="password" @bind-Value="verificarPassword" />
    </div>
    <div class="form-group">
        <label for="nombre">Nombre completo</label>
        <InputText class="form-control mb-2" type="text" @bind-Value="usuario.Nombre" />
    </div>
    <ValidationSummary />
    <button type="submit" class="btn btn-primary">Registrarse</button>
</EditForm>



@code {
    Usuario usuario { get; set; } =new Usuario();
    string verificarPassword { get; set; }=string.Empty;

    private async Task Registro()
    {
        if(usuario.Password!=verificarPassword)
        {
            await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Error al registrar al usuario",
                    Text = $"Las contraseñas no coinciden",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Ok",
                });
            return;
        }
        LoginResponse response = await AuthService.createUserWithEmailAndPassword(usuario.Email, usuario.Password, usuario.Nombre);
        if (response.User == null)
        {
            await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Error al registrar al usuario",
                    Text = $"Error:{response.Error}",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Ok",
                });
            return;
        }
        else
        {
            await SweetAlert.FireAsync("Usuario Creado", $"Se envio un correo electrónico a {response.User.Email} debe confirmar su cuenta para poder continuar");
            usuario.Password=usuario.Password.GetHashSha256();
            _memoryCache.SetCache<Usuario>(usuario.Email, usuario);
        }
        NavigationManager.NavigateTo("/login");
    }
        
}