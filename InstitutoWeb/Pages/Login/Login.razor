@page "/login"
@using InstitutoServices.Models.Login
@using InstitutoServices.Util
@inject AuthenticationService AuthService
@inject NavigationManager NavigationManager
@inject SweetAlertService SweetAlert
@inject ILogger<Login> logger
@inject IUsuarioService usuarioService
@inject IUsuarioStateService usuarioStateService



@if (userFirebaseAuthenticate == null)
{
    <div class="card text-center">
        <div class="card-header">
            Iniciar sesión
        </div>
        <div class="card-body">
            <h3 class="card-title">Bienvenido a InstitutoWeb</h3>
            <div class="container">
                <div class="row mb-3">
                    <div class="col-md-12 d-flex justify-content-center align-items-center">
                        <label class="form-label me-2">Email</label>
                        <InputText class="form-control w-50" @bind-Value="usuario.Email" placeholder="Email" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12 d-flex justify-content-center align-items-center">
                        <label class="form-label me-2">Password</label>
                        <InputText class="form-control w-50" @bind-Value="usuario.Password" placeholder="Password" type="password" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12 d-flex justify-content-center align-items-center">
                        <button class="btn btn-primary me-2" @onclick="IniciarSesion">Acceder</button>
                        <button class="btn btn-secondary" @onclick="Registrarse">Registrarme</button>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12 d-flex justify-content-center align-items-center">
                        @* <button class="btn btn-dark me-2" @onclick="LoginGoogle">Google</button> *@
                        <button @onclick="LoginGoogle" class="btn btn-dark me-2"><svg width="1em" height="1em" fill="none" viewBox="0 0 18 19" xmlns="http://www.w3.org/2000/svg"><path fill="#FFC107" d="M15.204 8.206h-.537v-.028h-6v2.667h3.767A3.998 3.998 0 0 1 4.667 9.51a4 4 0 0 1 4-4c1.02 0 1.947.385 2.653 1.013l1.886-1.885a6.64 6.64 0 0 0-4.54-1.794 6.667 6.667 0 1 0 6.538 5.36"></path><path fill="#FB5B5B" d="m2.769 6.408 2.19 1.607A4 4 0 0 1 8.667 5.51c1.02 0 1.947.385 2.653 1.013l1.886-1.885a6.64 6.64 0 0 0-4.54-1.794A6.66 6.66 0 0 0 2.77 6.408"></path><path fill="#4CAF50" d="M8.667 16.178a6.64 6.64 0 0 0 4.47-1.73l-2.064-1.746a3.97 3.97 0 0 1-2.406.81 4 4 0 0 1-3.761-2.65l-2.174 1.676a6.66 6.66 0 0 0 5.935 3.64"></path><path fill="#1976D2" d="M15.204 8.206h-.537v-.028h-6v2.667h3.767a4 4 0 0 1-1.362 1.857h.001l2.063 1.745c-.146.133 2.197-1.602 2.197-4.936a6.7 6.7 0 0 0-.13-1.305"></path></svg> <span>Acceder con Google</span></button><div><iframe aria-hidden="true" data-hcaptcha-widget-id="2b7fn9gxdhd6" data-hcaptcha-response="" src="https://newassets.hcaptcha.com/captcha/v1/05c78a4/static/hcaptcha.html#frame=checkbox-invisible" style="display: none;"></iframe><textarea id="g-recaptcha-response-2b7fn9gxdhd6" name="g-recaptcha-response" style="display: none;"></textarea><textarea id="h-captcha-response-2b7fn9gxdhd6" name="h-captcha-response" style="display: none;"></textarea></div>
                        @* <button class="btn btn-info" @onclick="LoginFacebook">Facebook</button> *@
                        <button class="btn btn-dark" @onclick="ResetearPassword">Olvidé mi contraseña</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-footer text-body-secondary">
            Desarrollo 3er año - TSDS - 2024
        </div>
    </div>
@*     <h3>Iniciar sesión</h3>

    <EditForm Model="usuario" OnValidSubmit="IniciarSesion">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="email">Email</label>
            <InputText class="form-control mb-2" type="text" @bind-Value="usuario.Email" />
        </div>
        <div class="form-group">
            <label for="clave">Contraseña</label>
            <InputText class="form-control mb-2" type="password" @bind-Value="usuario.Password" />
        </div>

        <div class="form-group">
            <label>Recordar Contraseña</label>
            <InputCheckbox @bind-Value="remenberPassword" />
        </div>

        <ValidationSummary />
        <button type="submit" class="btn btn-primary">Ingresar</button>
        <button class="btn btn-secondary" @onclick="Registrarse">Registrarse</button>

    </EditForm>
    <button class="btn btn-dark" @onclick="LoginGoogle">Google</button>
    <button class="btn btn-info" @onclick="LoginFacebook">Facebook</button>



    <button class="btn btn-dark" @onclick="ResetearPassword">Olvidé mi contraseña</button> *@

}
else
{
    <h1>Bienvenido @userFirebaseAuthenticate.DisplayName</h1>
    <button class="btn btn-primary" @onclick="CerrarSesion">Cerrar sesión</button>
}


@code {
    Usuario? usuario { get; set; } = new Usuario();

    bool remenberPassword { get; set; } = false;

    FirebaseUser? userFirebaseAuthenticate { get; set; } = null;


    protected async override Task OnInitializedAsync()
    {
        //userFirebaseAuthenticate = await AuthService.GetUserAuthenticated();
        usuarioStateService.OnChange += ChequeoEstadoLogin;
    }

    private async Task IniciarSesion()
    {
        LoginResponse response = await AuthService.SignInWithEmailPassword(usuario.Email, usuario.Password, remenberPassword);
        //logger.LogInformation($"la confirmación del email es igual a:{user.EmailVerified}");
        if (response.User == null)
        {
            await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Error inicio de sesión",
                    Text = $"Error:{response.Error}",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Ok",
                });
            return;
        }
        else
        if (!response.User.EmailVerified)
        {
            await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Verificación de email",
                    Text = $"{response.User.DisplayName} Debe verificar su email para poder continuar",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Ok",
                });
            return;
        }
        var usuarioCreado = await usuarioService.GetUserByEmail(response.User.Email);
        usuarioStateService.SetUsuario(usuarioCreado, response.User);

    }

    private async Task CerrarSesion()
    {
        await AuthService.SignOut();
        usuario = new Usuario();
    }

    private async Task Registrarse()
    {
        NavigationManager.NavigateTo("/registrarse");
    }

    private async Task LoginGoogle()
    {
        userFirebaseAuthenticate = await AuthService.LoginWithGoogle();
    }

    private async Task LoginFacebook()
    {
        userFirebaseAuthenticate = await AuthService.LoginWithFacebook();
    }

    public async void ChequeoEstadoLogin()
    {

        StateHasChanged();
        //si ya hay alguien autenticado lo envio al componente perfilUsuario
        if (usuarioStateService.FirebaseUser != null)
        {
            NavigationManager.NavigateTo("/perfilusuario");
        }
    }

    public void Dispose()
    {
        usuarioStateService.OnChange -= ChequeoEstadoLogin;
    }

    private async Task ResetearPassword()
    {
        if (!Helper.IsEmailValid(usuario.Email))
        {
            await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Resetear contraseña",
                    Text = $"Error, debe ingresar un email válido en el formulario, email=\"{usuario.Email}\"",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Ok",
                });
            return;
        }
        var usuarioExistente = await usuarioService.GetUserByEmail(usuario.Email);
        if (usuarioExistente == null)
        {
            await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Resetear contraseña",
                    Text = $"Error, no existe un usuario con el email {usuario.Email}",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Ok",
                });
            return;
        }
        bool reseteo = await AuthService.SendPasswordResetEmail(usuario.Email);
        if (reseteo)
        {
            await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Resetear contraseña",
                    Text = $"Se envió un email a {usuario.Email} para resetear la contraseña",
                    Icon = SweetAlertIcon.Info,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Ok",
                });
        }
        else
        {
            await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Resetear contraseña",
                    Text = $"Error al enviar el email a {usuario.Email} para resetear la contraseña",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Ok",
                });
        }

    }

}