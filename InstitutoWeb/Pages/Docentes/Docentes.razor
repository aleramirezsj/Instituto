@page "/docentes"

@inject SweetAlertService SweetAlert
@inject IMemoryCacheBlazorService _memoryCache

<PageTitle>Docentes</PageTitle>
<h1>Docentes</h1>

@if (docentes == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <NuevoEditarDocente Docente="@currentDocente" OnCancelar="Cancelar" OnGuardar="Guardar" />
    <TableIdNombre ListEntity="@(docentes.Cast<IEntityIdNombre>().ToList())" OnEditar="Editar" OnEliminar="Eliminar" />
}

    @code {
        private List<Docente>? docentes;
        private Docente currentDocente;

    protected override async Task OnInitializedAsync()
    {
        docentes = await _memoryCache.GetAllCacheAsync<Docente>();
    }

    private async void Eliminar(IEntityIdNombre entity)
    {
        var docente = (Docente)entity;
        SweetAlertResult respuesta = await SweetAlert.FireAsync(new SweetAlertOptions
            {
                Title = "Borrando docente",
                Text = $"¿Está seguro que desea borrar al docente {docente.Nombre}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si, quiero borrarlo!",
                CancelButtonText = "No, espera"
            });
        if (respuesta.IsConfirmed)
        {
            await _memoryCache.DeleteCacheAsync<Docente>(docente.Id);
            docentes = await _memoryCache.GetAllCacheAsync<Docente>();
            StateHasChanged();
        }
    }
    private async Task Guardar()
    {
        docentes = await _memoryCache.GetAllCacheAsync<Docente>();
        currentDocente = null;
        StateHasChanged();

    }
    private async Task Cancelar()
    {
        currentDocente = null;
    }
    private async Task Editar(IEntityIdNombre entity)
    {
        var docente = (Docente)entity;
        currentDocente = docente;
    }
}
