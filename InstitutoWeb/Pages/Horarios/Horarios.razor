@page "/horarios"

@inject SweetAlertService SweetAlert
@inject ILogger<Horarios> logger
@inject IMemoryCacheService _memoryCache
@inject IUsuarioStateService usuarioStateService


<PageTitle>Horarios</PageTitle>
<h1>Horarios</h1>

@if (periodosHorarios == null && carreras==null)
{
    <p><em>Cargando ciclos lectivos y carreras...</em></p>
}
else
{
    
    if (idPeriodoHorarioSeleccionado == null)
    {
        <ListCard ListEntity="@(periodosHorarios.Cast<IEntityIdNombre>().ToList())" OnSeleccionar="SeleccionarCicloLectivo" TituloCard="Período de horario" />
    }
    else
    {
        if(idCarreraSeleccionada==null)
        {
            <ListCard ListEntity="@(carreras.Cast<IEntityIdNombre>().ToList())" OnSeleccionar="SeleccionarCarrera" TituloCard="Carrera" />
        }else
        {
            
                <div class="row">
                    <div class="text-end">
                    @if(usuarioStateService.Usuario!=null)
                    {
                        <button class="btn btn-info me-2" @onclick="VerSoloMisHorarios">Ver mis horarios </button>
                    }
                        <button class="btn btn-info" @onclick="VerHorariosTodasLasCarreras">Ver todos los horarios</button>
                    </div>
                </div>
            
            if(usuarioStateService.Usuario==null||usuarioStateService?.Usuario?.TipoUsuario==TipoUsuarioEnum.Alumno||verTodosLosHorarios)
            {
                <TableDetallesHorarios DetallesHorarios="@detallesHorarios" />
            }else
            {
                <TableDetallesHorariosDocente DetallesHorarios="@detallesHorarios" />
            }

        }
        
    }
}

@code {
    private List<PeriodoHorario>? periodosHorarios;
    private List<Carrera>? carreras;
    private List<DetalleHorario>? detallesHorarios;

    private int? idPeriodoHorarioSeleccionado;
    private int? idCarreraSeleccionada;
    private bool verTodosLosHorarios = false;

    //from query
    [SupplyParameterFromQuery]
    [Parameter]
    public int IdCicloLectivo { get; set; }

    [SupplyParameterFromQuery]
    [Parameter]
    public int IdCarrera { get; set; }

    protected override async Task OnInitializedAsync()
    {
        periodosHorarios= await _memoryCache.GetAllCacheAsync<PeriodoHorario>();
        carreras = await _memoryCache.GetAllCacheAsync<Carrera>();
        if (periodosHorarios.Any(c => c.Actual))
            idPeriodoHorarioSeleccionado = periodosHorarios.Where(c => c.Actual).FirstOrDefault().Id;

        if (usuarioStateService.Usuario != null)
            ObtenerHorariosDelUsuarioLogueado();

        if (IdCarrera != 0 && idPeriodoHorarioSeleccionado != null)
        {
            idCarreraSeleccionada = IdCarrera;
            detallesHorarios = (await _memoryCache.GetAllCacheAsync<DetalleHorario>())
            .Where(d => d.Horario?.Materia.AnioCarrera.CarreraId == idCarreraSeleccionada && d.Horario.PeriodoHorarioId == idPeriodoHorarioSeleccionado).ToList();
        }

    }

    private async Task SeleccionarCicloLectivo(int idPeriodoHorario)
    {
        idPeriodoHorarioSeleccionado = idPeriodoHorario;
        StateHasChanged();
    }

    private async Task SeleccionarCarrera(int idCarrera)
    {
        idCarreraSeleccionada = idCarrera;

        detallesHorarios = (await _memoryCache.GetAllCacheAsync<DetalleHorario>())
        .Where(d => d.Horario?.Materia.AnioCarrera.CarreraId == idCarreraSeleccionada && d.Horario.PeriodoHorarioId == idPeriodoHorarioSeleccionado).ToList();
        logger.LogInformation("el tipo de usuario actual es " + usuarioStateService.Usuario.TipoUsuario);
        StateHasChanged();
    }

    private void VerHorariosTodasLasCarreras()
    {
        verTodosLosHorarios = true;
        idCarreraSeleccionada = null;
        //detallesHorarios = null;
        StateHasChanged();
    }

    private async Task ObtenerHorariosDelUsuarioLogueado()
    {
        if (usuarioStateService.Usuario.TipoUsuario == TipoUsuarioEnum.Alumno)
        {
            if (usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Count > 1)
            {
                carreras = (await _memoryCache.GetAllCacheAsync<Carrera>())
                        .Where(c => usuarioStateService.Usuario.Alumno.InscripcionesACarreras.Select(i => i.CarreraId).Contains(c.Id)).ToList();
            }
            else if (idPeriodoHorarioSeleccionado != null)
            {
                idCarreraSeleccionada = usuarioStateService.Usuario.Alumno.InscripcionesACarreras.FirstOrDefault().CarreraId;
                //muestro por consola cuantos detalles horarios hay
                detallesHorarios = (await _memoryCache.GetAllCacheAsync<DetalleHorario>())
                .Where(d => d.Horario?.Materia.AnioCarrera.CarreraId == idCarreraSeleccionada && d.Horario.PeriodoHorarioId == idPeriodoHorarioSeleccionado).ToList();
            }
            //detallesHorarios = await detalleHorarioService.GetByCarreraAsync(idCicloLectivoSeleccionado, idCarreraSeleccionada);
        }
        if (usuarioStateService.Usuario.TipoUsuario == TipoUsuarioEnum.Docente)
        {
            idCarreraSeleccionada = 0;

            //selecciono los horarios del docente logueado comprobando que no contenga nulos
            detallesHorarios = (await _memoryCache.GetAllCacheAsync<DetalleHorario>())
                .Where(d => d.Horario?.IntegrantesHorario?.Any(i => i.DocenteId == usuarioStateService.Usuario.Docente.Id) == true
                            && d.Horario?.PeriodoHorarioId == idPeriodoHorarioSeleccionado)
                .ToList();




            //detallesHorarios = await detalleHorarioService.GetByCarreraAsync(idCicloLectivoSeleccionado, idCarreraSeleccionada);
        }
    }
    private void VerSoloMisHorarios()
    {
        verTodosLosHorarios = false;
        ObtenerHorariosDelUsuarioLogueado();
        StateHasChanged();
    }
}
