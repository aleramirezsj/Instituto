@inject IInscriptoCarreraService inscriptoCarreraService
@inject IGenericService<Carrera> carreraService
@inject ILogger<AlumnoData> logger
@inject NavigationManager NavigationManager
@inject SweetAlertService SweetAlert
@inject IMemoryCacheService _memoryCache
@inject IUsuarioStateService usuarioStateService
@inject IUsuarioService _usuarioService;




<div>
    <h4>Datos del Alumno.</h4>
    <p>Nombre: @alumno.ApellidoNombre</p>
    <p>Dirección: @alumno.Direccion</p>
    <p>Teléfono: @alumno.Telefono</p>
</div>
<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
<button class="btn btn-primary" @onclick="()=>HandleInscribirseACarrera()">Seleccionar @tituloTableCarrera</button>
@if (inscripcionesACarreras==null||inscripcionesACarreras.Count==0)
{
    <p><em>Eres un nuevo alumno, necesitamos completar tu perfil selecciona la o las carreras que cursas</em></p>
}
else
{
    <h4>@tituloTableCarrera en la que estás inscripto</h4>
   
    <table class="table">
        <tbody>
            @foreach (var inscripcion in inscripcionesACarreras)
            {
                <tr>
                    <td>@inscripcion.Carrera.Nombre</td>
                </tr>
            }
        </tbody>
    </table>
}
@if (seleccionarCarreras)
{
    <ListCardSelection ListEntity="@(carreras.Cast<IEntityIdNombre>().ToList())" TituloCard="Carreras" OnSeleccionar="HandleSeleccionarCarrera" />
}


@code {
    [Parameter]
    public Alumno? alumno { get; set; }
    public List<InscriptoCarrera>? inscripcionesACarreras { get; set; }
    bool seleccionarCarreras { get; set; }=false;
    List<Carrera>? carreras { get; set; }
    string tituloTableCarrera => inscripcionesACarreras?.Count > 1 ? "Carreras" : "Carrera";


    protected override async Task OnInitializedAsync()
    {
        carreras = await _memoryCache.GetAllCacheAsync<Carrera>();
        inscripcionesACarreras = (List<InscriptoCarrera>) alumno.InscripcionesACarreras;
        //inscripcionesACarreras = await inscriptoCarreraService.GetByAlumno(alumno.Id);
        logger.LogInformation("inscripciones "+inscripcionesACarreras.Count().ToString());
        //marco las carreras que ya están inscriptas usando el campo Eliminado
        foreach (var carrera in carreras)
        {
            carrera.Eliminado = inscripcionesACarreras.Any(i => i.CarreraId == carrera.Id);
        }

    }

    private void HandleInscribirseACarrera()
    {
        seleccionarCarreras = true;
        StateHasChanged();
    }

    private async Task HandleSeleccionarCarrera(List<IEntityIdNombre> listSelected)
    {
        //comparo listSelected con inscripcionesACarreras y dejo 2 nuevas listas, una con las carreras a agregar y otra con las carreras a eliminar

        try
        {
            foreach (var carreraSelected in listSelected)
            {
                if (!inscripcionesACarreras.Any(i => i.CarreraId == carreraSelected.Id))
                {
                    var carrera= carreras.FirstOrDefault(c => c.Id == carreraSelected.Id);
                    var inscripcionACarrera = new InscriptoCarrera { AlumnoId = alumno.Id ,CarreraId = carreraSelected.Id, Carrera=carrera };
                    await _memoryCache.AddCacheAsync<InscriptoCarrera>(inscripcionACarrera);
                    //await inscriptoCarreraService.AddAsync(new InscriptoCarrera { AlumnoId = alumno.Id, CarreraId = carreraSelected.Id });
                }
            }

            foreach (var inscripcion in inscripcionesACarreras)
            {
                if (listSelected.All(c => c.Id != inscripcion.CarreraId))
                    await _memoryCache.DeleteCacheAsync<InscriptoCarrera>(inscripcion.Id);

                //await inscriptoCarreraService.DeleteAsync(inscripcion.Id);
            }
            seleccionarCarreras = false;
            inscripcionesACarreras = (await _memoryCache.GetAllCacheAsync<InscriptoCarrera>())
                                .Where(inscripcion => inscripcion.AlumnoId.Equals(alumno.Id)).ToList();
            logger.LogInformation("inscripciones " + inscripcionesACarreras.Count().ToString());
            //muestro por consola la lista de inscripciones
            foreach (var inscripcion in inscripcionesACarreras)
            {
                logger.LogInformation("inscripcion " + inscripcion?.Carrera?.Nombre);

            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error al inscribirse a una carrera");
        }

        var usuario = await _usuarioService.GetUserByEmail(usuarioStateService?.FirebaseUser?.Email);
        usuarioStateService.SetUsuario(usuario, usuarioStateService.FirebaseUser);

        StateHasChanged();
    }

    private  Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        if(inscripcionesACarreras.Count==0)
        {
            SweetAlert.FireAsync("Alumno creado con exito", "Para completar tu perfil debes indicar las carreras en las que estás inscripto.", SweetAlertIcon.Info);
            context.PreventNavigation();
        }  
        return Task.CompletedTask;
    }
    // private Task OnBeforeInternalNavigation(LocationChangingContext context)
    // {
    //     // Lógica para evitar la navegación si es necesario.
    //     if (context.TargetLocation.Contains("restricted"))
    //     {
    //         context.PreventNavigation(); // Evita la navegación si es necesario.
    //     }

    //     return Task.CompletedTask;
    // }
}